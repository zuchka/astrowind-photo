---
import Button from '~/components/ui/Button.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { ArtworkLocation as Props } from '~/types';

const {
  hotelLocation = '',
  gpsCoordinates = '',
  terrain = '',
  description = '',
  callToAction = {},
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id || "location"} isDark={isDark} containerClass={`max-w-5xl mx-auto pt-1 ${classes?.container ?? ''}`} bg={bg}>
  <div class="flex items-center justify-center">
    {
      hotelLocation && (
        <div class="w-full max-w-4xl rounded-lg backdrop-blur border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 shadow">
          <div class="text-left py-8 px-6">
              <h3 class="avenir-heavy text-2xl font-semibold uppercase leading-6 tracking-wider mb-2">Location</h3>
            {hotelLocation && <p class="avenir-medium text-xl text-gray-600 dark:text-slate-400">{hotelLocation}</p>}
          </div>
          
          <div class="px-6 pb-8 flex flex-col">
            <div class="lg:flex lg:justify-between mb-8">
              <div class="lg:w-1/4 lg:pr-4">
                <div class="flex flex-col lg:text-left">
                  {gpsCoordinates && <p class="avenir-book text-base text-gray-600 dark:text-slate-400">{gpsCoordinates}</p>}
                  {terrain && <p class="avenir-book text-base text-gray-600 dark:text-slate-400" set:html={terrain}></p>}
                </div>
              </div>
              <div class="mt-8 lg:mt-0 lg:w-3/4 lg:pl-4">
                <p class="avenir-book text-lg leading-7 text-gray-600 dark:text-slate-400 text-left" set:html={description}></p>
              </div>
            </div>
            <div class="flex justify-between items-center mt-auto">
              <Button 
                variant="secondary" 
                text="←" 
                href={Astro.url.pathname.includes('/mountains') ? '/mountains/landing' : '/sea/landing'} 
              />
              {callToAction && (
                typeof callToAction === 'string' ? (
                  <div set:html={callToAction} />
                ) : (
                  callToAction &&
                  callToAction.href && <Button {...callToAction} />
                )
              )}
            </div>
          </div>
        </div>
      )
    }
  </div>
</WidgetWrapper>
